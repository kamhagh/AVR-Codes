
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ea  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008c3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001db  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000154  00000000  00000000  00000afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001b5  00000000  00000000  00000c51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000011d  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003d  00000000  00000000  00000f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z8adc_initv>:
}

void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	87 b9       	out	0x07, r24	; 7
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  70:	87 e8       	ldi	r24, 0x87	; 135
  72:	86 b9       	out	0x06, r24	; 6
  74:	08 95       	ret

00000076 <_Z8adc_readh>:
}

uint_least16_t adc_read(uint8_t ch)
{
	ch &= 0b00000111; // sets channel pin:P
	ADMUX = (ADMUX & 0xf8) | ch;
  76:	97 b1       	in	r25, 0x07	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

uint_least16_t adc_read(uint8_t ch)
{
	ch &= 0b00000111; // sets channel pin:P
  78:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xf8) | ch;
  7a:	98 7f       	andi	r25, 0xF8	; 248
  7c:	98 2b       	or	r25, r24
  7e:	97 b9       	out	0x07, r25	; 7
	
	ADCSRA |= 1<<ADSC; // starts conversation sets ADSC :1;  !!!
  80:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & 1<<ADSC);
  82:	36 99       	sbic	0x06, 6	; 6
  84:	fe cf       	rjmp	.-4      	; 0x82 <_Z8adc_readh+0xc>
	
	return (ADC);
  86:	24 b1       	in	r18, 0x04	; 4
  88:	35 b1       	in	r19, 0x05	; 5
  8a:	82 2f       	mov	r24, r18
  8c:	93 2f       	mov	r25, r19
  8e:	08 95       	ret

00000090 <main>:
void adc_init();

int main(void)
{
	int sens_1,sens_2;
	adc_init();
  90:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8adc_initv>
	DDRD |= 1 << 6;
  94:	8e 9a       	sbi	0x11, 6	; 17
	DDRD |= 1 << 5;
  96:	8d 9a       	sbi	0x11, 5	; 17
		
	while (1)
	{
		sens_1 = adc_read(0);
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 3b 00 	call	0x76	; 0x76 <_Z8adc_readh>
  9e:	c8 2f       	mov	r28, r24
  a0:	d9 2f       	mov	r29, r25
		sens_2 = adc_read(1);
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	0e 94 3b 00 	call	0x76	; 0x76 <_Z8adc_readh>
  a8:	28 2f       	mov	r18, r24
  aa:	39 2f       	mov	r19, r25
		if((sens_1 - sens_2) > 1 && sens_1 > 400){
  ac:	ce 01       	movw	r24, r28
  ae:	82 1b       	sub	r24, r18
  b0:	93 0b       	sbc	r25, r19
  b2:	02 97       	sbiw	r24, 0x02	; 2
  b4:	3c f0       	brlt	.+14     	; 0xc4 <main+0x34>
  b6:	c1 39       	cpi	r28, 0x91	; 145
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	d8 07       	cpc	r29, r24
  bc:	1c f0       	brlt	.+6      	; 0xc4 <main+0x34>
			PORTD |= 1 << 6;
  be:	96 9a       	sbi	0x12, 6	; 18
			PORTD &= ~(1<<5);
  c0:	95 98       	cbi	0x12, 5	; 18
  c2:	0a c0       	rjmp	.+20     	; 0xd8 <main+0x48>
		} else if((sens_2 - sens_1) > 1 && sens_2 > 400) {
  c4:	c9 01       	movw	r24, r18
  c6:	8c 1b       	sub	r24, r28
  c8:	9d 0b       	sbc	r25, r29
  ca:	02 97       	sbiw	r24, 0x02	; 2
  cc:	2c f0       	brlt	.+10     	; 0xd8 <main+0x48>
  ce:	21 39       	cpi	r18, 0x91	; 145
  d0:	31 40       	sbci	r19, 0x01	; 1
  d2:	14 f0       	brlt	.+4      	; 0xd8 <main+0x48>
			PORTD &= ~(1<<6);
  d4:	96 98       	cbi	0x12, 6	; 18
			PORTD |= (1<<5);
  d6:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e4       	ldi	r24, 0x4F	; 79
  da:	93 ec       	ldi	r25, 0xC3	; 195
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x4c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x52>
  e2:	00 00       	nop
  e4:	d9 cf       	rjmp	.-78     	; 0x98 <main+0x8>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
