#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include "lcd.h"

double getDistance(){
uint16_t t1 = 0, t2 = 0;                                     // Containers for two timestamps
  lcd_puts("zero");
	PORTB|=1<<0;          // Simple steps for generating
	_delay_us(12);                    // a trigger pulse at trigger pin
	PORTB&=~(1<<0) ;       //
	TCCR1A = 0;                                                        // Timer operating freq is 		16MHz/64 (from prescalar)
	TCCR1B = 0x43;                                                 // gives min. resolution of 4us
	// ICES1 = 1 for rising edge detection on ICP1
	while((TIFR&(1<<ICF1))==0);                   // polled until rising edge detected

	t1 = ICR1L;                                                           // Storing the timer value
	t1 |= ICR1H<<8;
	TIFR |= 1<<ICF1;                                            // Clearing the flag for next use
	TCCR1B = 0x03;   
	lcd_puts("First");                                              // ICES1 = 0 for falling edge detection
	while((TIFR&(1<<ICF1))==0);   
	lcd_puts("second");                // polled until falling edge detected
	t2 = ICR1L;                                                           // Storing the timer value
	t2 |= ICR1H<<8;
	TIFR |= 1<<ICF1;                                            // Clearing the flag for next use
	TCCR1B = 0;                                                        // Stopping the timer
	 
	return (double)((t2-t1)*4)/58;                   // Measure to give result in terms of cm
	}

void main()
{
	double f;	
	char buffer[10];
	
	DDRB |= 1 << 0;
	DDRD |= 1 << 6;
	
	lcd_init(LCD_DISP_ON_CURSOR);
	lcd_home;
	lcd_clrscr;
	while(1)
	{
		f = getDistance();
		sprintf(buffer, "%d", f);
		lcd_puts("Starting");
		_delay_ms(1000);
		lcd_puts(buffer);
		_delay_ms(300);
		lcd_clrscr();
	}
}
