
Button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000009a  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000110  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000873  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000011f  00000000  00000000  000008c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000cf  00000000  00000000  000009e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000017d  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000d5  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000d29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRD |= 1 << PIND1;
  6c:	89 9a       	sbi	0x11, 1	; 17
	DDRD &= ~(1 << PIND0);
  6e:	88 98       	cbi	0x11, 0	; 17
	PORTD |= 1 << PIND0;
  70:	90 9a       	sbi	0x12, 0	; 18
    while(1)
    {
        if(bit_is_clear(PIND,0))
		{
			
			PORTD ^= 1 << PIND1;
  72:	92 e0       	ldi	r25, 0x02	; 2
	DDRD &= ~(1 << PIND0);
	PORTD |= 1 << PIND0;
	
    while(1)
    {
        if(bit_is_clear(PIND,0))
  74:	80 99       	sbic	0x10, 0	; 16
  76:	04 c0       	rjmp	.+8      	; 0x80 <main+0x14>
		{
			
			PORTD ^= 1 << PIND1;
  78:	82 b3       	in	r24, 0x12	; 18
  7a:	89 27       	eor	r24, r25
  7c:	82 bb       	out	0x12, r24	; 18
  7e:	01 c0       	rjmp	.+2      	; 0x82 <main+0x16>
			
		}
		else{
			PORTD |= 1 << PIND1;
  80:	91 9a       	sbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f e5       	ldi	r18, 0x5F	; 95
  84:	3a ee       	ldi	r19, 0xEA	; 234
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	30 40       	sbci	r19, 0x00	; 0
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x26>
  92:	00 00       	nop
  94:	ef cf       	rjmp	.-34     	; 0x74 <main+0x8>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
