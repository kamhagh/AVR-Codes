
Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000cc  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008a3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000015f  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e0  00000000  00000000  00000a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000189  00000000  00000000  00000b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000d2  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000db2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main()
{
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
  6c:	8f b5       	in	r24, 0x2f	; 47
  6e:	82 6a       	ori	r24, 0xA2	; 162
  70:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	8b 61       	ori	r24, 0x1B	; 27
  76:	8e bd       	out	0x2e, r24	; 46

	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
  78:	87 e8       	ldi	r24, 0x87	; 135
  7a:	93 e1       	ldi	r25, 0x13	; 19
  7c:	97 bd       	out	0x27, r25	; 39
  7e:	86 bd       	out	0x26, r24	; 38

	DDRD |=(1<<PD4)|(1<<PD5);   //PWM Pins as Out
  80:	81 b3       	in	r24, 0x11	; 17
  82:	80 63       	ori	r24, 0x30	; 48
  84:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << 7);
  86:	8f 98       	cbi	0x11, 7	; 17
	PORTD |= 1 << 7;
  88:	97 9a       	sbi	0x12, 7	; 18

	OCR1A=135;
  8a:	87 e8       	ldi	r24, 0x87	; 135
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	9b bd       	out	0x2b, r25	; 43
  90:	8a bd       	out	0x2a, r24	; 42
	while(1)
	{

		if (bit_is_clear(PIND,7))
		{
			OCR1A=497;  //90 degree
  92:	21 ef       	ldi	r18, 0xF1	; 241
  94:	31 e0       	ldi	r19, 0x01	; 1
	OCR1A=135;

	while(1)
	{

		if (bit_is_clear(PIND,7))
  96:	87 99       	sbic	0x10, 7	; 16
  98:	fe cf       	rjmp	.-4      	; 0x96 <main+0x2a>
		{
			OCR1A=497;  //90 degree
  9a:	3b bd       	out	0x2b, r19	; 43
  9c:	2a bd       	out	0x2a, r18	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	4f ef       	ldi	r20, 0xFF	; 255
  a0:	51 ef       	ldi	r21, 0xF1	; 241
  a2:	6b e2       	ldi	r22, 0x2B	; 43
  a4:	41 50       	subi	r20, 0x01	; 1
  a6:	50 40       	sbci	r21, 0x00	; 0
  a8:	60 40       	sbci	r22, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x38>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x42>
  ae:	00 00       	nop
			_delay_ms(900);
			OCR1A = 135;
  b0:	9b bd       	out	0x2b, r25	; 43
  b2:	8a bd       	out	0x2a, r24	; 42
  b4:	4f ef       	ldi	r20, 0xFF	; 255
  b6:	5f e0       	ldi	r21, 0x0F	; 15
  b8:	67 e2       	ldi	r22, 0x27	; 39
  ba:	41 50       	subi	r20, 0x01	; 1
  bc:	50 40       	sbci	r21, 0x00	; 0
  be:	60 40       	sbci	r22, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x4e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x58>
  c4:	00 00       	nop
  c6:	e7 cf       	rjmp	.-50     	; 0x96 <main+0x2a>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
