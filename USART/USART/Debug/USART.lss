
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000194  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000228  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000098b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  000009ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000106  00000000  00000000  000009e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000be  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000065  00000000  00000000  00000ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000034  00000000  00000000  00000c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000e4  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	69 00       	.word	0x0069	; ????

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d8 e0       	ldi	r29, 0x08	; 8
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_clear_bss>:
  62:	20 e0       	ldi	r18, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	01 c0       	rjmp	.+2      	; 0x6c <.do_clear_bss_start>

0000006a <.do_clear_bss_loop>:
  6a:	1d 92       	st	X+, r1

0000006c <.do_clear_bss_start>:
  6c:	a2 36       	cpi	r26, 0x62	; 98
  6e:	b2 07       	cpc	r27, r18
  70:	e1 f7       	brne	.-8      	; 0x6a <.do_clear_bss_loop>

00000072 <__do_global_ctors>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	c6 e5       	ldi	r28, 0x56	; 86
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	04 c0       	rjmp	.+8      	; 0x82 <__do_global_ctors+0x10>
  7a:	22 97       	sbiw	r28, 0x02	; 2
  7c:	fe 01       	movw	r30, r28
  7e:	0e 94 c4 00 	call	0x188	; 0x188 <__tablejump__>
  82:	c4 35       	cpi	r28, 0x54	; 84
  84:	d1 07       	cpc	r29, r17
  86:	c9 f7       	brne	.-14     	; 0x7a <__do_global_ctors+0x8>
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:

int main ( void )
{
	char ReceivedByte ;
	
	DDRD |= 1 << 7;
  94:	8f 9a       	sbi	0x11, 7	; 17
	
	UCSRB = (1 << RXEN ) | (1 << TXEN ); // Turn on the transmission and reception circuitry
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL ) | (1 << UCSZ0 ) | (1 << UCSZ1 ); // Use 8- bit character sizes
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
	UBRRH = ( BAUD_PRESCALE >> 8); // Load upper 8- bits of the baud rate value into the high byte
  9e:	80 91 60 00 	lds	r24, 0x0060
  a2:	90 91 61 00 	lds	r25, 0x0061
  a6:	89 2f       	mov	r24, r25
  a8:	99 0f       	add	r25, r25
  aa:	99 0b       	sbc	r25, r25
  ac:	80 bd       	out	0x20, r24	; 32
	UBRRL = BAUD_PRESCALE ; // Load lower 8- bits of the baud rate value into the low byte of the
  ae:	80 91 60 00 	lds	r24, 0x0060
  b2:	89 b9       	out	0x09, r24	; 9
		while (( UCSRA & (1 << RXC )) == 0);
        ReceivedByte = UDR;
		if(ReceivedByte == 1){
			PORTD |= 1 << 7;
			while (( UCSRA & (1 << UDRE )) == 0);
			UDR = 1;
  b4:	91 e0       	ldi	r25, 0x01	; 1
	UBRRH = ( BAUD_PRESCALE >> 8); // Load upper 8- bits of the baud rate value into the high byte
	UBRRL = BAUD_PRESCALE ; // Load lower 8- bits of the baud rate value into the low byte of the
	
    while(1)
    {
		while (( UCSRA & (1 << RXC )) == 0);
  b6:	5f 9b       	sbis	0x0b, 7	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <main+0x22>
        ReceivedByte = UDR;
  ba:	8c b1       	in	r24, 0x0c	; 12
		if(ReceivedByte == 1){
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	29 f4       	brne	.+10     	; 0xca <main+0x36>
			PORTD |= 1 << 7;
  c0:	97 9a       	sbi	0x12, 7	; 18
			while (( UCSRA & (1 << UDRE )) == 0);
  c2:	5d 9b       	sbis	0x0b, 5	; 11
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <main+0x2e>
			UDR = 1;
  c6:	9c b9       	out	0x0c, r25	; 12
  c8:	f6 cf       	rjmp	.-20     	; 0xb6 <main+0x22>
		} else{ if(ReceivedByte == 0){
  ca:	81 11       	cpse	r24, r1
  cc:	f4 cf       	rjmp	.-24     	; 0xb6 <main+0x22>
		PORTD &= ~(1 << 7);
  ce:	97 98       	cbi	0x12, 7	; 18
  d0:	f2 cf       	rjmp	.-28     	; 0xb6 <main+0x22>

000000d2 <_GLOBAL__sub_I_BAUD_PRESCALE>:

# include <avr/io.h>
# define USART_BAUDRATE 9600
// # define BAUD_PRESCALE ((( 16000000 / ( USART_BAUDRATE * 16 UL))) - 1)

int BAUD_PRESCALE = ((( 16000000 / (BAUD_PRESCALE * 16))) -1);
  d2:	20 91 60 00 	lds	r18, 0x0060
  d6:	30 91 61 00 	lds	r19, 0x0061
  da:	22 95       	swap	r18
  dc:	32 95       	swap	r19
  de:	30 7f       	andi	r19, 0xF0	; 240
  e0:	32 27       	eor	r19, r18
  e2:	20 7f       	andi	r18, 0xF0	; 240
  e4:	32 27       	eor	r19, r18
  e6:	44 27       	eor	r20, r20
  e8:	37 fd       	sbrc	r19, 7
  ea:	40 95       	com	r20
  ec:	54 2f       	mov	r21, r20
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	74 e2       	ldi	r23, 0x24	; 36
  f2:	84 ef       	ldi	r24, 0xF4	; 244
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 84 00 	call	0x108	; 0x108 <__divmodsi4>
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	31 09       	sbc	r19, r1
  fe:	30 93 61 00 	sts	0x0061, r19
 102:	20 93 60 00 	sts	0x0060, r18
 106:	08 95       	ret

00000108 <__divmodsi4>:
 108:	05 2e       	mov	r0, r21
 10a:	97 fb       	bst	r25, 7
 10c:	16 f4       	brtc	.+4      	; 0x112 <__divmodsi4+0xa>
 10e:	00 94       	com	r0
 110:	07 d0       	rcall	.+14     	; 0x120 <__divmodsi4_neg1>
 112:	57 fd       	sbrc	r21, 7
 114:	0d d0       	rcall	.+26     	; 0x130 <__divmodsi4_neg2>
 116:	0e 94 a0 00 	call	0x140	; 0x140 <__udivmodsi4>
 11a:	07 fc       	sbrc	r0, 7
 11c:	09 d0       	rcall	.+18     	; 0x130 <__divmodsi4_neg2>
 11e:	7e f4       	brtc	.+30     	; 0x13e <__divmodsi4_exit>

00000120 <__divmodsi4_neg1>:
 120:	90 95       	com	r25
 122:	80 95       	com	r24
 124:	70 95       	com	r23
 126:	61 95       	neg	r22
 128:	7f 4f       	sbci	r23, 0xFF	; 255
 12a:	8f 4f       	sbci	r24, 0xFF	; 255
 12c:	9f 4f       	sbci	r25, 0xFF	; 255
 12e:	08 95       	ret

00000130 <__divmodsi4_neg2>:
 130:	50 95       	com	r21
 132:	40 95       	com	r20
 134:	30 95       	com	r19
 136:	21 95       	neg	r18
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	4f 4f       	sbci	r20, 0xFF	; 255
 13c:	5f 4f       	sbci	r21, 0xFF	; 255

0000013e <__divmodsi4_exit>:
 13e:	08 95       	ret

00000140 <__udivmodsi4>:
 140:	a1 e2       	ldi	r26, 0x21	; 33
 142:	1a 2e       	mov	r1, r26
 144:	aa 1b       	sub	r26, r26
 146:	bb 1b       	sub	r27, r27
 148:	fd 01       	movw	r30, r26
 14a:	0d c0       	rjmp	.+26     	; 0x166 <__udivmodsi4_ep>

0000014c <__udivmodsi4_loop>:
 14c:	aa 1f       	adc	r26, r26
 14e:	bb 1f       	adc	r27, r27
 150:	ee 1f       	adc	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	a2 17       	cp	r26, r18
 156:	b3 07       	cpc	r27, r19
 158:	e4 07       	cpc	r30, r20
 15a:	f5 07       	cpc	r31, r21
 15c:	20 f0       	brcs	.+8      	; 0x166 <__udivmodsi4_ep>
 15e:	a2 1b       	sub	r26, r18
 160:	b3 0b       	sbc	r27, r19
 162:	e4 0b       	sbc	r30, r20
 164:	f5 0b       	sbc	r31, r21

00000166 <__udivmodsi4_ep>:
 166:	66 1f       	adc	r22, r22
 168:	77 1f       	adc	r23, r23
 16a:	88 1f       	adc	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	1a 94       	dec	r1
 170:	69 f7       	brne	.-38     	; 0x14c <__udivmodsi4_loop>
 172:	60 95       	com	r22
 174:	70 95       	com	r23
 176:	80 95       	com	r24
 178:	90 95       	com	r25
 17a:	9b 01       	movw	r18, r22
 17c:	ac 01       	movw	r20, r24
 17e:	bd 01       	movw	r22, r26
 180:	cf 01       	movw	r24, r30
 182:	08 95       	ret

00000184 <__tablejump2__>:
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31

00000188 <__tablejump__>:
 188:	05 90       	lpm	r0, Z+
 18a:	f4 91       	lpm	r31, Z
 18c:	e0 2d       	mov	r30, r0
 18e:	09 94       	ijmp

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
