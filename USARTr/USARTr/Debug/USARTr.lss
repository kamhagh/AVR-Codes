
USARTr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000c8  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008a3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000b0  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000006f  00000000  00000000  000009a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000005b  00000000  00000000  00000a11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000008b  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000b1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

int main(void)
{
	char recived;
	
	DDRD |= 1 << 7;
  82:	8f 9a       	sbi	0x11, 7	; 17
	
	UCSRB |= 1 << RXEN | 1 << TXEN;
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	88 61       	ori	r24, 0x18	; 24
  88:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL ) | (1 << UCSZ0 ) | (1 << UCSZ1 );
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
	UBRRH = BaudValue >> 8;
  8e:	80 91 60 00 	lds	r24, 0x0060
  92:	90 91 61 00 	lds	r25, 0x0061
  96:	89 2f       	mov	r24, r25
  98:	99 0f       	add	r25, r25
  9a:	99 0b       	sbc	r25, r25
  9c:	80 bd       	out	0x20, r24	; 32
	UBRRL = BaudValue;
  9e:	80 91 60 00 	lds	r24, 0x0060
  a2:	89 b9       	out	0x09, r24	; 9
			while (( UCSRA & (1 << UDRE )) == 0);
			UDR = 1;
		} else {
			PORTD &= ~(1 << 7);
			while (( UCSRA & (1 << UDRE )) == 0);
			UDR = 1;
  a4:	91 e0       	ldi	r25, 0x01	; 1
	UBRRH = BaudValue >> 8;
	UBRRL = BaudValue;
	
    while(1)
    {
        while (( UCSRA & (1 << RXC )) == 0);
  a6:	5f 9b       	sbis	0x0b, 7	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <main+0x24>
		recived = UDR;
  aa:	8c b1       	in	r24, 0x0c	; 12
		if (recived > 100)
  ac:	85 36       	cpi	r24, 0x65	; 101
  ae:	28 f0       	brcs	.+10     	; 0xba <main+0x38>
		{
			PORTD |= 1 << 7;
  b0:	97 9a       	sbi	0x12, 7	; 18
			while (( UCSRA & (1 << UDRE )) == 0);
  b2:	5d 9b       	sbis	0x0b, 5	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <main+0x30>
			UDR = 1;
  b6:	9c b9       	out	0x0c, r25	; 12
  b8:	f6 cf       	rjmp	.-20     	; 0xa6 <main+0x24>
		} else {
			PORTD &= ~(1 << 7);
  ba:	97 98       	cbi	0x12, 7	; 18
			while (( UCSRA & (1 << UDRE )) == 0);
  bc:	5d 9b       	sbis	0x0b, 5	; 11
  be:	fe cf       	rjmp	.-4      	; 0xbc <main+0x3a>
			UDR = 1;
  c0:	9c b9       	out	0x0c, r25	; 12
  c2:	f1 cf       	rjmp	.-30     	; 0xa6 <main+0x24>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
