
USARTs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000e0  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008bb  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000130  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e1  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000010f  00000000  00000000  00000b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000d7  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003d  00000000  00000000  00000d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  7a:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z8adc_initv>:
}

void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	86 b9       	out	0x06, r24	; 6
  8a:	08 95       	ret

0000008c <_Z8adc_readh>:
}

uint_least16_t adc_read(uint8_t ch)
{
	ch &= 0b00000111; // sets channel pin:P
	ADMUX = (ADMUX & 0xf8) | ch;
  8c:	97 b1       	in	r25, 0x07	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

uint_least16_t adc_read(uint8_t ch)
{
	ch &= 0b00000111; // sets channel pin:P
  8e:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xf8) | ch;
  90:	98 7f       	andi	r25, 0xF8	; 248
  92:	98 2b       	or	r25, r24
  94:	97 b9       	out	0x07, r25	; 7
	
	ADCSRA |= 1<<ADSC; // starts conversation sets ADSC :1;  !!!
  96:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & 1<<ADSC);
  98:	36 99       	sbic	0x06, 6	; 6
  9a:	fe cf       	rjmp	.-4      	; 0x98 <_Z8adc_readh+0xc>
	
	return (ADC);
  9c:	24 b1       	in	r18, 0x04	; 4
  9e:	35 b1       	in	r19, 0x05	; 5
  a0:	82 2f       	mov	r24, r18
  a2:	93 2f       	mov	r25, r19
  a4:	08 95       	ret

000000a6 <main>:
uint_least16_t adc_read(uint8_t ch);

int main(void)
{
	char recived;
	adc_init();
  a6:	0e 94 41 00 	call	0x82	; 0x82 <_Z8adc_initv>
	UCSRB |= 1 << RXEN | 1 << TXEN;
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	88 61       	ori	r24, 0x18	; 24
  ae:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL ) | (1 << UCSZ0 ) | (1 << UCSZ1 );
  b0:	86 e8       	ldi	r24, 0x86	; 134
  b2:	80 bd       	out	0x20, r24	; 32
	UBRRH = BaudValue >> 8;
  b4:	80 91 60 00 	lds	r24, 0x0060
  b8:	90 91 61 00 	lds	r25, 0x0061
  bc:	89 2f       	mov	r24, r25
  be:	99 0f       	add	r25, r25
  c0:	99 0b       	sbc	r25, r25
  c2:	80 bd       	out	0x20, r24	; 32
	UBRRL = BaudValue;
  c4:	80 91 60 00 	lds	r24, 0x0060
  c8:	89 b9       	out	0x09, r24	; 9
	
	
    while(1)
    {
		while (( UCSRA & (1 << UDRE )) == 0);
  ca:	5d 9b       	sbis	0x0b, 5	; 11
  cc:	fe cf       	rjmp	.-4      	; 0xca <main+0x24>
        UDR = adc_read(0);
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 46 00 	call	0x8c	; 0x8c <_Z8adc_readh>
  d4:	8c b9       	out	0x0c, r24	; 12
		while (( UCSRA & (1 << RXC )) == 0);
  d6:	5f 9b       	sbis	0x0b, 7	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <main+0x30>
  da:	f7 cf       	rjmp	.-18     	; 0xca <main+0x24>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
