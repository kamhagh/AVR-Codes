
USARTsenser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000d2  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008ab  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000bd  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000007c  00000000  00000000  000009b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000f8  00000000  00000000  00000a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000ac  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000013  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000c0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

int main(void)
{
	char ReceivedByte ;
	
	DDRB &= ~(1 << PINB0);
  82:	b8 98       	cbi	0x17, 0	; 23
	DDRB |= 1 << 1;
  84:	b9 9a       	sbi	0x17, 1	; 23
	PORTB |= 1 << 0;
  86:	c0 9a       	sbi	0x18, 0	; 24
	
	UCSRB = (1 << RXEN) | 1 << TXEN;
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 1 << URSEL | 1 << UCSZ0 | 1 << UCSZ1;
  8c:	86 e8       	ldi	r24, 0x86	; 134
  8e:	80 bd       	out	0x20, r24	; 32
	
	UBRRH = (BAUD_PRESCALE >> 8);
  90:	80 91 60 00 	lds	r24, 0x0060
  94:	90 91 61 00 	lds	r25, 0x0061
  98:	89 2f       	mov	r24, r25
  9a:	99 0f       	add	r25, r25
  9c:	99 0b       	sbc	r25, r25
  9e:	80 bd       	out	0x20, r24	; 32
	UBRRL = BAUD_PRESCALE;
  a0:	80 91 60 00 	lds	r24, 0x0060
  a4:	89 b9       	out	0x09, r24	; 9
    while(1)
    {
        if (bit_is_clear(PINB,0))
        {
			while (( UCSRA & (1 << UDRE )) == 0);
			UDR = 1;
  a6:	91 e0       	ldi	r25, 0x01	; 1
	
	UBRRH = (BAUD_PRESCALE >> 8);
	UBRRL = BAUD_PRESCALE;
    while(1)
    {
        if (bit_is_clear(PINB,0))
  a8:	b0 99       	sbic	0x16, 0	; 22
  aa:	0c c0       	rjmp	.+24     	; 0xc4 <main+0x42>
        {
			while (( UCSRA & (1 << UDRE )) == 0);
  ac:	5d 9b       	sbis	0x0b, 5	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <main+0x2a>
			UDR = 1;
  b0:	9c b9       	out	0x0c, r25	; 12
			while (( UCSRA & (1 << RXC )) == 0);
  b2:	5f 9b       	sbis	0x0b, 7	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <main+0x30>
			ReceivedByte = UDR;
  b6:	8c b1       	in	r24, 0x0c	; 12
			if (ReceivedByte == 1)
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	11 f4       	brne	.+4      	; 0xc0 <main+0x3e>
			{
				PORTB |= 1 << 1;
  bc:	c1 9a       	sbi	0x18, 1	; 24
  be:	f4 cf       	rjmp	.-24     	; 0xa8 <main+0x26>
			} else {
				PORTB &= ~(1 <<1);
  c0:	c1 98       	cbi	0x18, 1	; 24
  c2:	f2 cf       	rjmp	.-28     	; 0xa8 <main+0x26>
			}
			
        } else {
			while (( UCSRA & (1 << UDRE )) == 0);
  c4:	5d 9b       	sbis	0x0b, 5	; 11
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <main+0x42>
			UDR = 0;
  c8:	1c b8       	out	0x0c, r1	; 12
			PORTB &= ~(1 << 1);
  ca:	c1 98       	cbi	0x18, 1	; 24
  cc:	ed cf       	rjmp	.-38     	; 0xa8 <main+0x26>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
