
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000e8  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008bf  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000a8  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000072  00000000  00000000  000009be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000061  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00000a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000008d  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ae  00000000  00000000  00000b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000c33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_7>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
	sei();
  6c:	78 94       	sei

	DDRD |= 0b01111111;
  6e:	81 b3       	in	r24, 0x11	; 17
  70:	8f 67       	ori	r24, 0x7F	; 127
  72:	81 bb       	out	0x11, r24	; 17
	PORTD |= 0b01010101;
  74:	82 b3       	in	r24, 0x12	; 18
  76:	85 65       	ori	r24, 0x55	; 85
  78:	82 bb       	out	0x12, r24	; 18

	TCCR1B |= 1<<CS10 | 1<<CS11 | 1<<WGM12;
  7a:	8e b5       	in	r24, 0x2e	; 46
  7c:	8b 60       	ori	r24, 0x0B	; 11
  7e:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= 1<<OCIE1A; //If using atmega324, this regester is TIMSK1
  80:	89 b7       	in	r24, 0x39	; 57
  82:	80 61       	ori	r24, 0x10	; 16
  84:	89 bf       	out	0x39, r24	; 57
	OCR1A = 15624;
  86:	88 e0       	ldi	r24, 0x08	; 8
  88:	9d e3       	ldi	r25, 0x3D	; 61
  8a:	9b bd       	out	0x2b, r25	; 43
  8c:	8a bd       	out	0x2a, r24	; 42
  8e:	ff cf       	rjmp	.-2      	; 0x8e <main+0x22>

00000090 <__vector_7>:
	{
	}
}

ISR(TIMER1_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
	for(int i=0;i<=6;i++){
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
	PORTD ^= 1 << i;
  ac:	41 e0       	ldi	r20, 0x01	; 1
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	62 b3       	in	r22, 0x12	; 18
  b2:	9a 01       	movw	r18, r20
  b4:	08 2e       	mov	r0, r24
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__vector_7+0x2c>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <__vector_7+0x28>
  c0:	26 27       	eor	r18, r22
  c2:	22 bb       	out	0x12, r18	; 18
	}
}

ISR(TIMER1_COMPA_vect)
{
	for(int i=0;i<=6;i++){
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	87 30       	cpi	r24, 0x07	; 7
  c8:	91 05       	cpc	r25, r1
  ca:	91 f7       	brne	.-28     	; 0xb0 <__vector_7+0x20>
	PORTD ^= 1 << i;
	}
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	6f 91       	pop	r22
  d2:	5f 91       	pop	r21
  d4:	4f 91       	pop	r20
  d6:	3f 91       	pop	r19
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
