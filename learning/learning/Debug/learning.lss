
learning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000012a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001be  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000923  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000020  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000017d  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000eb  00000000  00000000  00000aef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000019a  00000000  00000000  00000bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000024  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000eb  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000090  00000000  00000000  00000e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000010  00000000  00000000  00000f13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <util/delay.h>

int buttonstate;
int main(void)
{
	DDRB |= 1 << PINB0;
  7c:	b8 9a       	sbi	0x17, 0	; 23
	DDRB &= ~(1 << PINB1);
  7e:	b9 98       	cbi	0x17, 1	; 23
	DDRB |= 1 << PINB2;
  80:	ba 9a       	sbi	0x17, 2	; 23
	PORTB |= 1 << PINB1;
  82:	c1 9a       	sbi	0x18, 1	; 24
	buttonstate = 0;
  84:	10 92 61 00 	sts	0x0061, r1
  88:	10 92 60 00 	sts	0x0060, r1
			case 2:
				PORTB &= ~(1 << PINB0);
				PORTB |= 1 << PINB2;
				break;
			case 3:
				PORTB ^= 1 << PINB2;
  8c:	34 e0       	ldi	r19, 0x04	; 4
			case 4:
				PORTB ^= 1 << PINB0;
				PORTB &= ~(1 << PINB2);
				break;
			case 5:
				PORTB ^= 1	<< PINB0;	
  8e:	21 e0       	ldi	r18, 0x01	; 1
	PORTB |= 1 << PINB1;
	buttonstate = 0;
	
	while (1)
	{
		if(bit_is_clear(PINB,1))
  90:	b1 99       	sbic	0x16, 1	; 22
  92:	10 c0       	rjmp	.+32     	; 0xb4 <main+0x38>
		{
			buttonstate++;
  94:	80 91 60 00 	lds	r24, 0x0060
  98:	90 91 61 00 	lds	r25, 0x0061
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	90 93 61 00 	sts	0x0061, r25
  a2:	80 93 60 00 	sts	0x0060, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	83 e2       	ldi	r24, 0x23	; 35
  a8:	94 ef       	ldi	r25, 0xF4	; 244
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x2e>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x34>
  b0:	00 00       	nop
  b2:	06 c0       	rjmp	.+12     	; 0xc0 <main+0x44>
  b4:	83 e2       	ldi	r24, 0x23	; 35
  b6:	94 ef       	ldi	r25, 0xF4	; 244
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x3c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x42>
  be:	00 00       	nop
			_delay_ms(250);
		} else { _delay_ms(250); }
		
		switch(buttonstate){
  c0:	80 91 60 00 	lds	r24, 0x0060
  c4:	90 91 61 00 	lds	r25, 0x0061
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	91 05       	cpc	r25, r1
  cc:	b9 f0       	breq	.+46     	; 0xfc <main+0x80>
  ce:	3c f4       	brge	.+14     	; 0xde <main+0x62>
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	91 05       	cpc	r25, r1
  d4:	71 f0       	breq	.+28     	; 0xf2 <main+0x76>
  d6:	7c f4       	brge	.+30     	; 0xf6 <main+0x7a>
  d8:	89 2b       	or	r24, r25
  da:	41 f0       	breq	.+16     	; 0xec <main+0x70>
  dc:	d9 cf       	rjmp	.-78     	; 0x90 <main+0x14>
  de:	85 30       	cpi	r24, 0x05	; 5
  e0:	91 05       	cpc	r25, r1
  e2:	a9 f0       	breq	.+42     	; 0x10e <main+0x92>
  e4:	7c f0       	brlt	.+30     	; 0x104 <main+0x88>
  e6:	06 97       	sbiw	r24, 0x06	; 6
  e8:	99 f6       	brne	.-90     	; 0x90 <main+0x14>
  ea:	18 c0       	rjmp	.+48     	; 0x11c <main+0xa0>
			case 0:
				PORTB &= ~(1 << PINB0);
  ec:	c0 98       	cbi	0x18, 0	; 24
				PORTB &= ~(1 << PINB2);
  ee:	c2 98       	cbi	0x18, 2	; 24
				break;
  f0:	cf cf       	rjmp	.-98     	; 0x90 <main+0x14>
			case 1:
				PORTB |= 1 << PINB0;
  f2:	c0 9a       	sbi	0x18, 0	; 24
				break;
  f4:	cd cf       	rjmp	.-102    	; 0x90 <main+0x14>
			case 2:
				PORTB &= ~(1 << PINB0);
  f6:	c0 98       	cbi	0x18, 0	; 24
				PORTB |= 1 << PINB2;
  f8:	c2 9a       	sbi	0x18, 2	; 24
				break;
  fa:	ca cf       	rjmp	.-108    	; 0x90 <main+0x14>
			case 3:
				PORTB ^= 1 << PINB2;
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	83 27       	eor	r24, r19
 100:	88 bb       	out	0x18, r24	; 24
				break;
 102:	c6 cf       	rjmp	.-116    	; 0x90 <main+0x14>
			case 4:
				PORTB ^= 1 << PINB0;
 104:	88 b3       	in	r24, 0x18	; 24
 106:	82 27       	eor	r24, r18
 108:	88 bb       	out	0x18, r24	; 24
				PORTB &= ~(1 << PINB2);
 10a:	c2 98       	cbi	0x18, 2	; 24
				break;
 10c:	c1 cf       	rjmp	.-126    	; 0x90 <main+0x14>
			case 5:
				PORTB ^= 1	<< PINB0;	
 10e:	88 b3       	in	r24, 0x18	; 24
 110:	82 27       	eor	r24, r18
 112:	88 bb       	out	0x18, r24	; 24
				PORTB ^= 1	<< PINB2;
 114:	88 b3       	in	r24, 0x18	; 24
 116:	83 27       	eor	r24, r19
 118:	88 bb       	out	0x18, r24	; 24
				break;
 11a:	ba cf       	rjmp	.-140    	; 0x90 <main+0x14>
			case 6:
				buttonstate = 0;
 11c:	10 92 61 00 	sts	0x0061, r1
 120:	10 92 60 00 	sts	0x0060, r1
				break;
 124:	b5 cf       	rjmp	.-150    	; 0x90 <main+0x14>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
