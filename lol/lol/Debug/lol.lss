
lol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000de  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008b7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000014d  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000f0  00000000  00000000  00000a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001a0  00000000  00000000  00000b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000cc  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include<util/delay.h>

int main(void)
{
	for(int i = 0;i<5;i++){
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
		
	DDRD |= 1 << i;
  70:	21 e0       	ldi	r18, 0x01	; 1
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	61 b3       	in	r22, 0x11	; 17
  76:	a9 01       	movw	r20, r18
  78:	08 2e       	mov	r0, r24
  7a:	02 c0       	rjmp	.+4      	; 0x80 <main+0x14>
  7c:	44 0f       	add	r20, r20
  7e:	55 1f       	adc	r21, r21
  80:	0a 94       	dec	r0
  82:	e2 f7       	brpl	.-8      	; 0x7c <main+0x10>
  84:	46 2b       	or	r20, r22
  86:	41 bb       	out	0x11, r20	; 17
#include <avr/io.h>
#include<util/delay.h>

int main(void)
{
	for(int i = 0;i<5;i++){
  88:	01 96       	adiw	r24, 0x01	; 1
  8a:	85 30       	cpi	r24, 0x05	; 5
  8c:	91 05       	cpc	r25, r1
  8e:	91 f7       	brne	.-28     	; 0x74 <main+0x8>
		
	DDRD |= 1 << i;
	
	}
	
	PORTD |= 1 << PIND0;
  90:	90 9a       	sbi	0x12, 0	; 18
	PORTD |= 1 << PIND2;
  92:	92 9a       	sbi	0x12, 2	; 18
	PORTD |= 1 << PIND4;
  94:	94 9a       	sbi	0x12, 4	; 18
	PORTD &= ~(1 << PIND1);
  96:	91 98       	cbi	0x12, 1	; 18
	PORTD &= ~(1 << PIND3);
  98:	93 98       	cbi	0x12, 3	; 18
	
	
    while(1)
    {
		for(int i=0;i<5;i++){
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
        PORTD ^= 1 << i;
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	70 e0       	ldi	r23, 0x00	; 0
	PORTD &= ~(1 << PIND3);
	
	
    while(1)
    {
		for(int i=0;i<5;i++){
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	0b c0       	rjmp	.+22     	; 0xbe <main+0x52>
        PORTD ^= 1 << i;
  a8:	e2 b3       	in	r30, 0x12	; 18
  aa:	9b 01       	movw	r18, r22
  ac:	08 2e       	mov	r0, r24
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <main+0x48>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <main+0x44>
  b8:	2e 27       	eor	r18, r30
  ba:	22 bb       	out	0x12, r18	; 18
	PORTD &= ~(1 << PIND3);
	
	
    while(1)
    {
		for(int i=0;i<5;i++){
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	85 30       	cpi	r24, 0x05	; 5
  c0:	91 05       	cpc	r25, r1
  c2:	94 f3       	brlt	.-28     	; 0xa8 <main+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f e7       	ldi	r18, 0x7F	; 127
  c6:	88 e3       	ldi	r24, 0x38	; 56
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x5e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x68>
  d4:	00 00       	nop
  d6:	ca 01       	movw	r24, r20
  d8:	f2 cf       	rjmp	.-28     	; 0xbe <main+0x52>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
